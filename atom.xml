<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[时光屋]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://villadora.github.io/"/>
  <updated>2014-06-02T11:00:04.126Z</updated>
  <id>http://villadora.github.io/</id>
  
  <author>
    <name><![CDATA[Villa Dora]]></name>
    <email><![CDATA[jky239@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[AMD Define and how to translate AMD to CommonJS]]></title>
    <link href="http://villadora.github.io/2014/05/23/amd-define-and-how-to-translate-amd-to-commonjs/"/>
    <id>http://villadora.github.io/2014/05/23/amd-define-and-how-to-translate-amd-to-commonjs/</id>
    <published>2014-05-23T09:06:59.000Z</published>
    <updated>2014-05-23T09:22:11.000Z</updated>
    <content type="html"><![CDATA[<p>CommonJS和AMD的争论已经有很多，而两者也在项目进化和融合。个人看来CommonJS更面向于开发者，对于开发者来说，需要的是清晰的版本和管理，更少的代码和干扰，更少的配置。而AMD在代码中允许匿名模块，模块名称和变量之间关系的不清晰，非就近依赖，冗余依赖定义都不是开发者友好。</p>
<p><a href="http://www.npmjs.com/require2commonjs" target="_blank">require2commonjs</a> 提供了命令行和node模块来将在requirejs中使用的AMD转化为CommonJS格式，方便其他使用CMD或者 <a href="http://nodejs.org" target="_blank">node</a> <a href="http://github.com/cortexjs/cortex" target="_blank">cortex</a> 等外部系统来使用。</p>
<p>目前的官方AMD提供一下几种方式去定义一个模块：</p>
<p>1) Dependency-free module, simple object</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>define({
    add: <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> {</span> <span class="keyword">return</span> a + b; }
});
</pre></td></tr></table></figure>

<p>没有任何依赖，直接定义模块的exports。这种情况下要将AMD转话为CommonJS模块，只需要变为</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>module.exports = {
    add: <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> {</span> <span class="keyword">return</span> a + b; }
};
</pre></td></tr></table></figure>

<p>语法树转换非常简单。</p>
<p>2) Simplified CommonJS wrapping</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre> define(<span class="function"><span class="keyword">function</span> <span class="params">(require, exports, module)</span> {</span>
     <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>),
         b = <span class="built_in">require</span>(<span class="string">'b'</span>);
     exports.action = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>};
 });
</pre></td></tr></table></figure>

<p>现在AMD提供CommonJS wrapping这种格式，更为简单。 只需要将factory函数中的函数体提取出来就可以了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>),
    b = <span class="built_in">require</span>(<span class="string">'b'</span>);
    
exports.action = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>};
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="AMD, CommonJS, require2commonjs, node" scheme="http://villadora.github.io/tags/AMD,%20CommonJS,%20require2commonjs,%20node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[regexp.toString()]]></title>
    <link href="http://villadora.github.io/2014/05/21/regexptostring()/"/>
    <id>http://villadora.github.io/2014/05/21/regexptostring()/</id>
    <published>2014-05-21T03:17:55.000Z</published>
    <updated>2014-05-21T03:21:50.000Z</updated>
    <content type="html"><![CDATA[<p>Regexp.toString在不同浏览器下修辞符顺序不一致。</p>
<p>Chrome, firefox</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>var re = <span class="regexp">/abc/gim</span>;
re.toString(); <span class="regexp">//</span> <span class="keyword">return</span> <span class="string">'/abc/gim'</span>
</pre></td></tr></table></figure>

<p>IE 9.0</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>var re = <span class="regexp">/abc/gim</span>;
re.toString(); <span class="regexp">//</span> <span class="keyword">return</span> <span class="string">'/abc/igm'</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="ie, regexp, browsers" scheme="http://villadora.github.io/tags/ie,%20regexp,%20browsers/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cookie Version in J2EE]]></title>
    <link href="http://villadora.github.io/2014/05/06/cookie-version/"/>
    <id>http://villadora.github.io/2014/05/06/cookie-version/</id>
    <published>2014-05-06T05:34:00.000Z</published>
    <updated>2014-05-06T02:31:30.000Z</updated>
    <content type="html"><![CDATA[<p>在处理Cookie的时候发现不能处理servlet request中不能获取cookie中的带”:”字符的值.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>Cookie[] cookies = request.getCookies();
<span class="keyword">if</span> (cookies != <span class="keyword">null</span>) {
    <span class="keyword">for</span> (Cookie cookie : cookies) {
        <span class="keyword">if</span> (StringUtils.equalsIgnoreCase(cookie.getName(), name)) {
            value = cookie.getValue(); <span class="comment">// if the value in cookie is 'http://example.com' then here it will get 'http'</span>
            <span class="keyword">break</span>;
        }
    }
}
</pre></td></tr></table></figure>

<p>这是因为目前Cookie有两个标准，一个是Version 0 (<a href="http://curl.haxx.se/rfc/cookie_spec.html" target="_blank">Netscape spec</a>)</p>
<p>而J2EE的实现描述 Cookie#setValue 中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>With Version <span class="number">0</span> cookies, values should <span class="keyword">not</span> <span class="keyword">contain</span> white <span class="constant">space</span>, brackets, parentheses, <span class="keyword">equals</span> signs, commas, double quotes, slashes, question marks, <span class="keyword">at</span> signs, colons, <span class="keyword">and</span> semicolons. Empty values may <span class="keyword">not</span> behave <span class="keyword">the</span> same way <span class="function_start"><span class="keyword">on</span></span> all browsers.
`
</pre></td></tr></table></figure>

<p>也就是说Version 0 是不能包含空格，括弧，等号，逗号， 双引号等字符的。 </p>
<p>而Version 1 (<a href="http://www.ietf.org/rfc/rfc2109.txt" target="_blank">RFC 2109 spec</a>) 是可以的。</p>
<p>但是javax.servlet.http.Cookie的实现时默认是使用 Version 0</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">By</span> <span class="keyword">default</span>, cookies are created according <span class="keyword">to</span> the Netscape cookie specification. The version can be changed <span class="keyword">with</span> the
setVersion <span class="function"><span class="keyword">method</span>.</span>
</pre></td></tr></table></figure>

<p>而看起来container默认的选择也是使用了Version 0而没有去改变version。所以当Cookie值中带有’:’时，就无法读到colon后的内容。</p>
<p>如果没有办法改container并且只能使用默认的request的话，暂时的解决方案是在写cookie的时候URLEncode, 然后在服务器端读的时候做URLDecode。</p>
]]></content>
    
    
      <category term="java" scheme="http://villadora.github.io/tags/java/"/>
    
      <category term="cookie" scheme="http://villadora.github.io/tags/cookie/"/>
    
      <category term="version" scheme="http://villadora.github.io/tags/version/"/>
    
      <category term="Java" scheme="http://villadora.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Iscroll5的几个bug]]></title>
    <link href="http://villadora.github.io/2014/04/08/isroll-event-preventDefault/"/>
    <id>http://villadora.github.io/2014/04/08/isroll-event-preventDefault/</id>
    <published>2014-04-08T02:18:00.000Z</published>
    <updated>2014-05-01T12:20:23.000Z</updated>
    <content type="html"><![CDATA[<p>Iscroll是在移动端开发不可缺少的组件，至少在实现原生的overflow:scroll之前。其中碰到有两个问题。</p>
<ol>
<li>Function.prototype.bind iscroll5在indicator中使用了bind, 但是这个bind在2.x的android浏览器上和webview中都没法使用，导致脚本出错。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">this</span>.fadeTimeout = setTimeout((function (<span class="keyword">val</span>) {
    <span class="keyword">this</span>.wrapperStyle.opacity = <span class="keyword">val</span>;
    <span class="keyword">this</span>.visible = +<span class="keyword">val</span>;
}).bind(<span class="keyword">this</span>, <span class="keyword">val</span>), delay);
</pre></td></tr></table></figure>

<p>去掉bind, 改成closure解决问题</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> selft = this;
<span class="keyword">self</span>.fadetimeout = setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">(val)</span> {</span>
    <span class="keyword">self</span>.wrapperStyle.opacity = val;
    <span class="keyword">self</span>.visible = +val;
}, delay);
</pre></td></tr></table></figure>

<p>这个修正已经有人发了 pullrequest 只不过暂时还没有merge到master分支中。</p>
<ol>
<li>click事件多次触发。在有些浏览器上会发现使用了iscroll的元素click事件会导致多次触发, 这是因为iscroll为了模拟滑动事件，屏蔽了scroll元素上的click事件，而自己通过touchend来决定是否触发模拟的click事件。但是在移动上的有些浏览器上e.preventDefault并不能阻止事件，因为click事件的cancelable为false。 这个时候只能检测e.cancelable属性，然后决定是否要产生模拟事件。</li>
</ol>
]]></content>
    
    
      <category term="mobile" scheme="http://villadora.github.io/tags/mobile/"/>
    
      <category term="android" scheme="http://villadora.github.io/tags/android/"/>
    
      <category term="iscroll" scheme="http://villadora.github.io/tags/iscroll/"/>
    
      <category term="javascript" scheme="http://villadora.github.io/tags/javascript/"/>
    
      <category term="Web" scheme="http://villadora.github.io/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在cluster中使用passport openID]]></title>
    <link href="http://villadora.github.io/2014/03/06/passport-openid-nodejs/"/>
    <id>http://villadora.github.io/2014/03/06/passport-openid-nodejs/</id>
    <published>2014-03-06T07:18:00.000Z</published>
    <updated>2014-05-01T12:20:11.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Passport_openid_in_cluster">Passport openid in cluster</h1>
<p>使用nodejs的cluster可以让我们更好的利用cpu资源, 但是同时也会带来一些问题.</p>
<h2 id="session">session</h2>
<p>这个大家都应该知道如果使用in memory session, 那么不同的cluster之间就不能共享session也会导致login失败, 解决办法很简单,使用redis或者mongo这种持久层来保存cookie, 或者可以使用sticky-session之类来固定cluster (但是stikcy-session这个模块是基于ip，在proxy背后会失去作用，没有找到源码，不推荐).</p>
<h2 id="open_id_association">open id association</h2>
<p>association是用来在replyParty和openID provider之间建立一个共享的secret, 这样在接下来的访问中就可以通过association来判断对方是不是伪造的。<br>但是再使用了cluster之后,http请求被分发给了不同的process, 前面拿到的association在另一个process里面正常的模式下是拿不到的，这个时候请求会被当作一个没有授权的请求,从而要求用户重新登录。解决办法是在passport的strategy中设置saveAssociation和loadAssociation将openIdAssocation存到redis或者mongodb中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre>    <span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>);
    <span class="keyword">var</span> strategy = <span class="keyword">new</span> GoogleStrategy({
        returnURL: callbackURL,
        realm: realm,
        stateless: <span class="literal">true</span>
    };
    
    <span class="comment">// ...</span>

    strategy.saveAssociation(<span class="function"><span class="keyword">function</span><span class="params">(handle, provider, algorithm, secret, expiresIn, done)</span> {</span>
        <span class="keyword">var</span> assoc = {
            handle: handle,
            provider: provider,
            algorithm: algorithm,
            secret: secret,
            expiresIn: expiresIn
        };
        
        <span class="comment">// save to redis/mongodb</span>
        save(<span class="function"><span class="keyword">function</span><span class="params">(err)</span> {</span>
            done(err);
        });
    });

    strategy.loadAssociation(<span class="function"><span class="keyword">function</span><span class="params">(handle, done)</span> {</span>
        <span class="comment">// load from redis/mongodb</span>
        load(handle, <span class="function"><span class="keyword">function</span><span class="params">(err, assoc)</span> {</span>
            <span class="keyword">if</span>(err) <span class="keyword">return</span> done(err);
            done(err, assoc.provider, assoc.algorithm, assoc.secret);
        });
    });
    
    passport.use(strategy);
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="passport" scheme="http://villadora.github.io/tags/passport/"/>
    
      <category term="openid" scheme="http://villadora.github.io/tags/openid/"/>
    
      <category term="nodejs" scheme="http://villadora.github.io/tags/nodejs/"/>
    
      <category term="cluster" scheme="http://villadora.github.io/tags/cluster/"/>
    
      <category term="javascript" scheme="http://villadora.github.io/tags/javascript/"/>
    
      <category term="Nodejs" scheme="http://villadora.github.io/categories/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript arguments长度限制]]></title>
    <link href="http://villadora.github.io/2013/08/08/arguments-exceed-javascript/"/>
    <id>http://villadora.github.io/2013/08/08/arguments-exceed-javascript/</id>
    <published>2013-08-08T08:00:19.000Z</published>
    <updated>2013-09-02T02:23:11.000Z</updated>
    <content type="html"><![CDATA[<p>先看下这一段代码片段(in chrome):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">var</span> a = [];
a[<span class="number">2</span>&lt;&lt;<span class="number">16</span>] = <span class="number">1</span>;
fucntion b() {}
b.apply([], a);
</pre></td></tr></table></figure>

<p>这段代码最终回导致RangeError: Maximum call stack size exceed. 实际上并不是因为调用栈满了，而只是数组长度太长了.<br>为什么会这样呢？ 不是在<code>a[2&lt;&lt;16] = 1</code>的时候还好好的吗？<br>大家都知道javascript的数组并不是真的数组，而只是一个特殊的以数组作为key的table而已，这点和lua是一样的。所以当我们在执行<code>a[2&lt;&lt;16] = 1</code>的时候，其实这生成的只不过是一个只有一个键值<em>2&lt;&lt;16</em>的表，空间只有1，这是没有任何问题的。</p>
<p>但当我们把一个数组作为arguments传递给一个函数时，情况就变了；同样，大家都知道arguments不是真的数组，它没有Array.push/pop等方法。但是我们可以把一个数组作为参数传递给apply方法，作为argumetns去调用一个函数。<br>实际的情况是，在这个时候你的数组虽然是一个table，但是在这个时候只能一个个的传递到栈上，没错,因为arguments是分配在Stack上的，而Array是分配在Heap上的。从某种意义上来数arguments才是真正的数组: 线性空间排序, 顺序访问。而Array更像上是Hash Table。接下来发生什么？javascript vm尝试去读取arguments中的参数，一个一个的把它放到调用栈上，传递给之后调用的函数,于是<code>for(var i = 0; i &lt; (2&lt;&lt;16); ++)...</code>，调用栈都被使用慢了！本来只占据Heap中一个位置，现在占据了整个栈的空间。而调用栈空间满了之后，会发生什么错误？就是我们开头看到的<em>RangeError: Maximum call stack size exceed.</em>， 而实际上叫做<em>Function arguments exceed the maximun limit.</em>更好些.</p>
]]></content>
    
    
      <category term="javascript, Array.push, push, Range Error" scheme="http://villadora.github.io/tags/javascript,%20Array.push,%20push,%20Range%20Error/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[interupt when hexo generating]]></title>
    <link href="http://villadora.github.io/2013/08/06/interupt-when-hexo-generating/"/>
    <id>http://villadora.github.io/2013/08/06/interupt-when-hexo-generating/</id>
    <published>2013-08-06T05:51:11.000Z</published>
    <updated>2013-08-06T06:02:52.000Z</updated>
    <content type="html"><![CDATA[<p>用<code>hexo generate</code>的时候有时强制中断了，下次再重新generate就会失败, 预计是<code>db.json</code>还没有完全生成完，而重新generate的时候会去尝试读<code>db.json</code>，这个时候就会报错，删除<code>db.json</code>就ok. 奇怪的是作者为什么在报错之后不直接重新生成<code>db.json</code>，毕竟这个文件只是用来做server的数据库，莫非还有别的用途?</p>
]]></content>
    
    
      <category term="hexo, interupt" scheme="http://villadora.github.io/tags/hexo,%20interupt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SVG Spec]]></title>
    <link href="http://villadora.github.io/2013/08/06/svg-spec/"/>
    <id>http://villadora.github.io/2013/08/06/svg-spec/</id>
    <published>2013-08-06T03:34:06.000Z</published>
    <updated>2013-08-06T05:50:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="SVG的Painters_model">SVG的Painters model</h3>
<p>每个操作都会向输出设备修改某块区域的绘图，而不管之前在这块区域内的绘制是什么。这和很多的绘图或现实模型相似，接近底层容易实现。没有透明度的情况下，新的绘制会直接覆盖原来的区域，而有透明度的设置时，最终结果则按照Alpha Blending来计算。</p>
<h3 id="Rendering_Order">Rendering Order</h3>
<p>元素在svg内的排列顺序暗含了元素的绘制顺序，svg document fragment的第一个元素将会首先被绘制到输出设备上。</p>
<h3 id="groups">groups</h3>
<p>‘g’元素实际上是穿件了一个临时的独立的背景色为黑色但是背景透明的画布,’g’的子元素则在这块画布上进行绘制</p>
<h3 id="types_of_graphics_elements">types of graphics elements</h3>
<p>SVG支持三种基本的图形元素:</p>
<ul>
<li>Shapes: 用到最多的，主要由各种线和填充构成</li>
<li>Text: 字符的组合</li>
<li>Raster images: 类似于bitmap,是一组包含了颜色，透明度信息的数组</li>
</ul>
<h4 id="Shapes_and_Text">Shapes and Text</h4>
<p>字符实际上最终也是形状的一种，由<strong>stroke</strong>和<strong>fill</strong>构成, 对于有一些形状, 比如path, 可以定义一些<strong>marker symbol</strong>,主要用来绘制箭头等。<br>其中<strong>fill</strong>首先被绘制，然后是<strong>stroke</strong>, 最后是<strong>marker symbol</strong>, <strong>marker</strong>的绘制顺序是沿着形状的outline来进行，从形状的起始点开始到结束点。</p>
<p>Ref: <a href="http://www.w3.org/TR/SVG/render" target="_blank">http://www.w3.org/TR/SVG/render.html</a></p>
]]></content>
    
    
      <category term="svg, web, spec" scheme="http://villadora.github.io/tags/svg,%20web,%20spec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hostname in mac]]></title>
    <link href="http://villadora.github.io/2013/07/08/hostname-in-mac/"/>
    <id>http://villadora.github.io/2013/07/08/hostname-in-mac/</id>
    <published>2013-07-08T01:30:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>在改写一个保存tmux状态的脚本(tmux-resurrect)的时候发现<code>hostname</code>这个命令拿到的是ip地址而不是我PROMPT里面的命令，这两个怎么会不一样呢？</p>
<p>在prompt里面的%m hostname通过以下途径获得：</p>
<ol>
<li>/etc/hostconfig: 在这个配置文件中配置</li>
<li>如果没找到就去/Library/Preferences/SystemConfiguration/preferences.plist中的’System&gt;System&gt;HostName’值</li>
<li>如果这个值为空，则通过逆向DNS查询找到ip地址</li>
<li>如果查询没找到才会用/Library/Preferences/SystemConfiguration/preferences.plist中的’System&gt;Network&gt;HostNames&gt;LocalHOstName’，这个也是用户在系统配置中的共享里配置的名字</li>
<li>最后如果这个也没查到，那就会返回localhost</li>
</ol>
<p>所以由于我hostconfig没配置，然后就找到preferences.plist中的HostName，也就是第二项。</p>
<p>而hostname命令就不一样了，好吧，这个过程是怎么样我也没找到，应该除了上述几个地方还有一些mac自己存放的配置文件，通过<code>scutil</code>来修改。只不过顺序和具体包含哪些不是很清楚。<br>只不过其中DNS查询在去找preferences.plist之前，所以我的<code>hostname</code>会返回ip地址</p>
<p>修改则可以通过</p>
<pre><code><span class="built_in">sudo</span> scutil --set HostName &lt;hostname&gt;
</code></pre><p>具体命令其他用法可以查看scutil(8) man page,可以看到 这个命令可以用来设置ComputerName LocalHostName和HostName。</p>
]]></content>
    
    
      <category term="mac, linux" scheme="http://villadora.github.io/tags/mac,%20linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5]]></title>
    <link href="http://villadora.github.io/2013/05/31/html5/"/>
    <id>http://villadora.github.io/2013/05/31/html5/</id>
    <published>2013-05-31T06:30:00.000Z</published>
    <updated>2014-05-01T12:15:07.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://dev.w3.org/html5/spec/Overview.html#introduction" target="_blank">http://dev.w3.org/html5/spec/Overview.html#introduction</a><br>HTML5 各方角力又开始了</p>
]]></content>
    
    
      <category term="html5" scheme="http://villadora.github.io/tags/html5/"/>
    
      <category term="web" scheme="http://villadora.github.io/tags/web/"/>
    
      <category term="Web" scheme="http://villadora.github.io/categories/Web/"/>
    
      <category term="HTML5" scheme="http://villadora.github.io/categories/Web/HTML5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA['$' in auto-mode-alist]]></title>
    <link href="http://villadora.github.io/2013/05/29/$-in-auto-mode-alist/"/>
    <id>http://villadora.github.io/2013/05/29/$-in-auto-mode-alist/</id>
    <published>2013-05-29T01:53:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>之前发现一个markdown文件载入之后一直要手动切换markdown-mode, 还要一遍遍的激活mode-hook上的flyspell-mode，实在很烦, 找了下原因，发现EmacsWiki:Auto-Mode-Alist上说:</p>
<p>“Note that \’ matches the end of a string, where as $ matches the empty string before a newline. Thus, $ may lead to unexpected behavior when dealing with filenames containing newlines. (Should be pretty rare… )”</p>
<p>也就是说”$”可能回匹配一个换行前的空字符，那个文件由于是从程序中生成的，所以名字中有了奇怪的字符，这样导致我之前写的”\.\(md\|markdown\)$”一直匹配不到,改成”\.\(md\|markdown\)\‘“就好了，好吧 这个正则够诡异的。</p>
]]></content>
    
    
      <category term="emacs, auto-mode" scheme="http://villadora.github.io/tags/emacs,%20auto-mode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Uglify-js Processing]]></title>
    <link href="http://villadora.github.io/2013/05/24/uglify-js-processing/"/>
    <id>http://villadora.github.io/2013/05/24/uglify-js-processing/</id>
    <published>2013-05-24T01:34:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="UglifyJs_1">UglifyJs 1</h2>
<p>‘parse-js’:主要用来做词法和语法分析，把js文件转化成abstract syntax tree，方便后面的程序处理。相当于编译器中的front-end<br>‘process.js’:在ast的IR上做优化, 其中包括:</p>
<p>1.重新从ast生成javascript（真心觉得这个应该放到下一个stage，而不是整合在process.js中,这个已经是属于编译器生成目标码的阶段了， 然后发现在UglifyJs2中作者完全改变了这些设计），这个过程中就可以去掉不必要的空白字符等;<br>2.缩短变量名，猜想应该是用类似于寄存器分配的算法来分配变量名，中间会对一些global scope的变量做一些特殊处理，比如DOM暴露的接口啊,其他的库中export的变量啊之类;<br>3.其他的一些优化， 这些都是一些为了性能，和缩减字符做的一些小优化，并不会改动语义和影响到可读性。</p>
<pre><code><span class="bullet">* </span>[]取值变成.操作符  <span class="smartquote">```foo['</span>bar'] =&gt; foo.bar<span class="code">```</span>
<span class="bullet">* </span>去掉不必要的{}
<span class="bullet">* </span>..etc.
</code></pre><h2 id="UglifyJs_2">UglifyJs 2</h2>
<p>在生成ast之后，在topLevel scope上定义了figure_out_scope方法，提供了额外的关于变量定义等node的其他关联信息，这样在之后做mangle和其他优化的时候有了更多信息。之后的优化和更改都放在了一些transform和walker中。</p>
<p>只不过在设计的时候TreeWalker和ast定义在一起，不得不考虑ast结构来进行visit，而transform更是定义在walker之上，导致一个本来很简单的树遍历需要考虑很多复杂的情况，而且由于ast本身并没有父结点的ref，回溯的信息都放到了walker里面，而一些transform的操作在需要知道父结点相关信息的时候需要一个个的去定义不同node的情况。自己在deobfuscate中写了个travese.js，基本可以完成transform和walker的工作。还是觉得esprima这种纯json的ast比较简洁。</p>
]]></content>
    
    
      <category term="javascript, ast, parse, minification" scheme="http://villadora.github.io/tags/javascript,%20ast,%20parse,%20minification/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Description on Function/Object and other things in Javascript]]></title>
    <link href="http://villadora.github.io/2013/05/22/type-system-in-javascript/"/>
    <id>http://villadora.github.io/2013/05/22/type-system-in-javascript/</id>
    <published>2013-05-22T02:51:00.000Z</published>
    <updated>2013-08-06T03:54:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Pre-Knowledge">Pre-Knowledge</h2>
<p>Function is a Object, Object has a constructor and a property called ‘__proto__‘, and also you know what happens during the ‘=new=’ keyword (allocate memory; set __proto__ to <em>Function</em>.prototype; apply <em>Function</em> to new created object;)</p>
<h2 id="What’s_a_Function?">What’s a Function?</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>    <span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> === <span class="literal">true</span> <span class="comment">// everything is a Object</span>
    <span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> === <span class="literal">true</span> <span class="comment">// Function is a Function, interesting, right?</span>
    <span class="built_in">Function</span>.constructor === <span class="built_in">Function</span>  <span class="comment">// Function initialize by itself</span>
    <span class="built_in">Function</span>.prototype === <span class="built_in">Function</span>:Empty  <span class="comment">// Function has prototype because it's a Function </span>
    <span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>:Empty  <span class="comment">// Function has __proto__ because it's a Object</span>
</pre></td></tr></table></figure>

<p>From these above we can easily understand that Function is a Object (everything is Object), and also is a <em>Function</em>. as Object, its constructor is itself; and the prototype is the Empty Function(remember is not a</p>
<figure class="highlight function()"><figcaption><span>{}```); and as an instance of _Function_; it's '\_\_proto\_\_' property is set to Function.prototype, which is the Empty Function.</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>
Here is something interesting:

What is <span class="keyword">Function</span>:Empty? it's a empty <span class="keyword">function</span>? we can test it

``` javascript
    <span class="keyword">Function</span>.prototype instanceof Object === <span class="keyword">true</span> // <span class="keyword">Function</span>.prototype is a object, because everything is object
    <span class="keyword">Function</span>.prototype instanceof <span class="keyword">Function</span> === <span class="keyword">false</span> // <span class="keyword">Function</span>.prototype Empty <span class="keyword">Function</span> is not a <span class="keyword">Function</span>! it can be called mother of all the functions, the Force!!
    <span class="keyword">Function</span>.prototype.__proto__ === {].__proto__ === Object {} // the __proto__ of <span class="keyword">Function</span>:Empty is the same as a <span class="keyword">Function</span>
    <span class="keyword">Function</span>.prototype.prototype === undefined // Because it's not a <span class="keyword">Function</span>, so it don't have prototype
</pre></td></tr></table></figure>

<p>So the Function:Empty is an Object rather than a Function, but it’s the mother of all the functions; That is said that all the functions are clone from this one.</p>
<p>That’s make sense, right? Let’s go back to the prototype chain:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>     <span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Function</span> === <span class="literal">true</span>
</pre></td></tr></table></figure>


<p>Function is prototyped from Function, according to the object creating process: we allocate the memory first, then set ‘__proto__‘ to ‘Function.prototype’.. wait so ‘Function.prototype’ is also a Function, there is a cycling here, so we need something to break the cycle, that’s ‘Function.Empty’.</p>
<p>What about new functions like</p>
<figure class="highlight function"><figcaption><span>A() {}```? </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>
``` javascript
    A instanceof <span class="keyword">Function</span> === true // A <span class="keyword">is</span> a <span class="attribute">'Function</span>' Object
    A.__proto__ === <span class="keyword">Function</span>.prototype // A should has everything <span class="keyword">in</span> <span class="attribute">'Function</span>'
    A.constructor === <span class="keyword">Function</span> // A <span class="keyword">is</span> constructed by <span class="attribute">'Function</span>'
    A.prototype !== <span class="keyword">Function</span>.prototype // A.prototype <span class="keyword">is</span> a <span class="keyword">new</span> object, this <span class="keyword">is</span> belong <span class="keyword">to</span> A, <span class="keyword">and</span> should be initialized during <span class="keyword">Function</span>(). I believe that every <span class="keyword">new</span> <span class="keyword">function</span> has a <span class="keyword">new</span> object as its prototype, <span class="keyword">if</span> I<span class="attribute">'m</span> wrong correct me
</pre></td></tr></table></figure>

<h2 id="What’s_an_Object?">What’s an Object?</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>    <span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> === <span class="literal">true</span> <span class="comment">//everything is object</span>
    <span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> === <span class="literal">true</span> <span class="comment">// Object also is a Function</span>
    <span class="built_in">Object</span>.constructor === <span class="built_in">Function</span> [native code] <span class="comment">//Object is initialized by vm</span>
    <span class="built_in">Object</span>.prototype === <span class="built_in">Object</span> {} <span class="comment">// Object.prototype is the 'Object {}'</span>
    <span class="built_in">Object</span>.prototype === <span class="built_in">Function</span>.prototype.__proto__ === {}.__proto__ <span class="comment">// the 'Object {}' is unique</span>
    <span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">// 'Object {}' is not a Object in V8, it's a root object in native code</span>
</pre></td></tr></table></figure>

<p>Object is also an Object because ‘everything is an object’, and Object is also a Function; and just like cycling in ‘Function’, the Object also need a root, that is ‘Object {}’. </p>
<p>Actually, objects are not an instance of Object,  they are objects whose prototype is ‘Object{}’, which is Object.prototype, when we create objects with Object Function, the Object.prototype is set to obj.__proto__.</p>
<h2 id="New_is_a_mistake?">New is a mistake?</h2>
<p>As already said by many people, seen in Douglas’s book, ‘=new=’ keyword done things that can be done with <code>Object.create</code> and <code>Function.apply</code>, see <a href="http://stackoverflow.com/questions/3650892/what-does-the-new-keyword-do-under-the-hood" target="_blank">StackOverflow:what does ‘new’ word do under the hook</a>.</p>
<p>In class hierarchy, the Class and Instance are different things, but in prototype hierarchy, there is no class and instance things, there are only Objects. Just like rumor, the ‘new’ keyword added is because the Manager in Netscape ask them to make something looks like Java:-)</p>
<h2 id="Ref:">Ref:</h2>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Details_of_the_Object_Model" target="_blank">MDN Details of the Object Model</a></li>
</ol>
]]></content>
    
    
      <category term="javascript" scheme="http://villadora.github.io/tags/javascript/"/>
    
      <category term="type" scheme="http://villadora.github.io/tags/type/"/>
    
      <category term="prototype" scheme="http://villadora.github.io/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NodeJs中exec和spawn的差别]]></title>
    <link href="http://villadora.github.io/2013/05/07/differences-between-exec-and-spawn/"/>
    <id>http://villadora.github.io/2013/05/07/differences-between-exec-and-spawn/</id>
    <published>2013-05-07T05:41:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>在NodeJS中创建一个子进程有两种方式: <code>spawn</code>和<code>exec</code>；这两者都可以通过｀require(‘child_process’)`来引入。那么这两个有什么区别呢？我应该使用哪一个呢？</p>
<p>这两者的区别主要是在他们和父进程之间的IO处理上,<code>spawn</code>调用后返回的是一个流,可以对stdout上添加事件来响应流数据,如<code>stdout.on(&#39;data&#39;, function() {...})</code>；在这个过程中，子进程输出到stdout中的数据会调用callback，是处于一个流工作的模式下，有一点输出就处理。而<code>exec</code>则是将输出放到一个buffer里面，这个buffer的大小是可以通过maxBuffer这个option配置的，默认是200k.</p>
<p>比较有趣的是实际上<code>exec</code>调用的是<code>execFile</code>，然后在<code>execFile</code>里面最终调用的还是<code>spawn</code>(see <a href="https://github.com/joyent/node/blob/master/lib/child_process.js#L573" target="_blank">L573</a>, <a href="https://github.com/joyent/node/blob/master/lib/child_process.js#L602" target="_blank">L602</a>).只不过在调用时<code>on(&#39;data&#39;,function(chunk){...}</code>是像一个string buffer里卖弄写chuck罢了。</p>
<p>最后如果只是输出很小那么直接用<code>exec</code>就可以了，而如果子进程的输出很大，而分配一个那么大的buffer也不是很合时宜的时候，就是用<code>spawn</code>。</p>
]]></content>
    
    
      <category term="nodejs, chil_process, spawn, exec" scheme="http://villadora.github.io/tags/nodejs,%20chil_process,%20spawn,%20exec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义git命令, like git-flow, git-extras]]></title>
    <link href="http://villadora.github.io/2013/05/06/custom-git-command/"/>
    <id>http://villadora.github.io/2013/05/06/custom-git-command/</id>
    <published>2013-05-06T03:56:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>git flow和git extras很强大，原先以为是用一些git alias定义git命令去调用shell脚本，之后看了代码才发现完全不是那么回事。</p>
<p>git的可扩展性非常强，去自定义一个git命令, 在unix环境下，你只需要在PATH中定义一个可执行的脚本，以”git=”开头，然后剩余的部分就是你的sub command的名字了。比如如果有一个”git-mark”的脚本，那么在执行git mark命令时，实际上git会去调用git-mark这个脚本。是不是很简单？</p>
<p>为了了解git对alias,builtin,custom command的执行顺序，弄了下脚本做测试。</p>
<ol>
<li>在有builtin的情况下，alias和custom command不起作用，就是说像log, status等这些命令是无法通过alias和custom command来覆盖的。</li>
<li>在没有builtin的情况下, custom command会先与alias之前，也就是说如果存在alias.try和git-try，那么在执行”git try”的时候始终会调用git-try而不是alias。</li>
</ol>
<p>这样顺序就是builtin &gt; custom command &gt; alias。</p>
]]></content>
    
    
      <category term="git, customize" scheme="http://villadora.github.io/tags/git,%20customize/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[同步调用在javascript中的应用]]></title>
    <link href="http://villadora.github.io/2013/04/26/usage-of-synchronize-tasks-in-javascript/"/>
    <id>http://villadora.github.io/2013/04/26/usage-of-synchronize-tasks-in-javascript/</id>
    <published>2013-04-26T02:54:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>在javascript中很多任务都是异步执行的，而在有些情况下，我们更希望利用同步的方式来组织：</p>
<ol>
<li>页面动画. 页面动画的执行现在即可以通过css也可以通过javascript来执行，理想的情况下自然是通过css来处理所有动画，但是在css并没有完全覆盖所有的动画并且设计总是在不断的涌现新的需求的情况下，很多时候我们的动画效果都是css和javascript混合执行的，而这个时候，我们希望在前一个css效果结束后才调用javascript之后的调用。或者两个javsacript的动画效果能够按照顺序执行。</li>
<li>page unload. 在执行page unload返回一些统计信息的时候，我们不希望函数被async的执行，否则在callback调用时页面已经被destory了，callback方法自然是没办法执行了。</li>
</ol>
]]></content>
    
    
      <category term="javascript" scheme="http://villadora.github.io/tags/javascript/"/>
    
      <category term="synchronize" scheme="http://villadora.github.io/tags/synchronize/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE7的两个兼容性问题]]></title>
    <link href="http://villadora.github.io/2013/04/06/ie7de-liang-ge-jian-rong-xing-wen-ti/"/>
    <id>http://villadora.github.io/2013/04/06/ie7de-liang-ge-jian-rong-xing-wen-ti/</id>
    <published>2013-04-06T12:38:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_获取href的属性_getAttribute(‘href’)">1. 获取href的属性 getAttribute(‘href’)</h2>
<p>在使用.getAttribute(‘href’)获取anchor上的’href’属性时，ie7的实现和其他的浏览器不一样：在ie里面会返回完整的url，而其他的浏览器则只会返回href的设置的值。而jQuery的attr是通过.getAttribute来拿属性的，也不可避免的存在了这个问题。stackoverflow上的建议是用.get(0).href。</p>
<p>ie7 has different implementation for .getAttribute(‘href’) with other browsers.</p>
<p>other browser will return the actual value in href attribute, but ie7 will return the full url of that link.</p>
<p>ref:<a href="http://stackoverflow.com/questions/1593174/wrong-extraction-of-attrhref-in-ie7-vs-all-other-browsers" target="_blank">http://stackoverflow.com/questions/1593174/wrong-extraction-of-attrhref-in-ie7-vs-all-other-browsers</a></p>
<h2 id="2-_‘mouseevent’穿透">2. ‘mouseevent’穿透</h2>
<p>在ie7中，使用绝对定位的元素如果’background-color’设为none或者transparent，那么鼠标事件则会完全忽略掉这个元素，而直接在藏在背后的元素上触发。</p>
<p>对于这类元素就只有设置他的background-color的值(不能为transparent)，而不能忽略。</p>
<p>For position:absolute element in IE7, if the background-color is none or transparent, the mouse events (like ‘click’, ‘mouseenter’,ect) will be triggered in the element that behind front one. Like a penetrability effect.</p>
<p>so make sure the absolute element and its children has a fixed background.</p>
]]></content>
    
    
      <category term="IE7, bugs" scheme="http://villadora.github.io/tags/IE7,%20bugs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Orion: Next Eclipse?]]></title>
    <link href="http://villadora.github.io/2013/04/03/orion-next-eclipse/"/>
    <id>http://villadora.github.io/2013/04/03/orion-next-eclipse/</id>
    <published>2013-04-03T02:28:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>Orion是一个开源的online IDE，javascript的client和java的server,也是属于Eclipse Project下面的一个重要项目；希望打造一个online版的eclipse。</p>
<p>比较好奇的是居然没有做成比较流行的SPA(Single Page Application)的形式，而是可以打开多个tab，并且允许你通过link共享，这是好处吧，不好的是这样每次做新的操作都要切换tab并且等待刷新，用户体验不是很好。就不能两者都结合起来么？</p>
<p>Link: <a href="https://orionhub.org" target="_blank">https://orionhub.org</a></p>
]]></content>
    
    
      <category term="IDE, Eclipse, Orion, Web" scheme="http://villadora.github.io/tags/IDE,%20Eclipse,%20Orion,%20Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Array slice in Ruby]]></title>
    <link href="http://villadora.github.io/2013/03/26/array-slice-in-ruby/"/>
    <id>http://villadora.github.io/2013/03/26/array-slice-in-ruby/</id>
    <published>2013-03-26T09:22:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>Ruby的文档实在太省略了,之前用slice不是很理解结果，在stackoverflow上面发现一个非常不错的<a href="http://stackoverflow.com/questions/3568222/array-slicing-in-ruby-looking-for-explanation-for-illogical-behaviour-taken-fr" target="_blank">解释</a>，也得到了confirm. </p>
<p>可以看到ruby的array.slice的处理是用元素之间的space来标记index的。</p>
]]></content>
    
    
      <category term="编程, Ruby, slice, stackoverflow" scheme="http://villadora.github.io/tags/%E7%BC%96%E7%A8%8B,%20Ruby,%20slice,%20stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Boot Configuration Data]]></title>
    <link href="http://villadora.github.io/2013/03/01/boot-configuration-data/"/>
    <id>http://villadora.github.io/2013/03/01/boot-configuration-data/</id>
    <published>2013-03-01T05:18:00.000Z</published>
    <updated>2013-08-03T14:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>Boot Configuration Data</p>
<p>Boot Configuration Data (BCD) is a firmware-independent database for boot-time configuration data. It replaces the boot.ini that was used by NTLDR, and is used by Microsoft’s new Windows Boot Manager.</p>
<p>Boot Configuration Data are stored in a data file that has the same format as the Windows Registry.[1] The file is located either on the EFI System Partition (on machines that use Extensible Firmware Interface firmware) or in \Boot\Bcd on the system volume (on machines that use IBM PC compatible firmware).</p>
<p>Boot Configuration Data may be altered using a command-line tool (bcdedit.exe), using Registry Editor (regedit.exe), using Windows Management Instrumentation, or with third party tools like EasyBCD.</p>
<p>Boot Configuration Data contain the menu entries that are presented by the Windows Boot Manager, just as boot.ini contained the menu entries that were presented by NTLDR. These menu entries can include:</p>
<ol>
<li>Options to boot Windows Vista by invoking winload.exe.</li>
<li>Options to resume Windows Vista from hibernation by invoking winresume.exe.</li>
<li>Options to boot a prior version of the Windows NT family by invoking its NTLDR.</li>
<li>Options to load and to execute a volume boot record.</li>
</ol>
<p>Boot Configuration Data allows for third party integration so anyone can implement tools like diagnostics or recovery options.</p>
]]></content>
    
    
  </entry>
  
</feed>
